// @hash v3-4F534E725729ED2A593AD2C56CB32D9DA7D56905
// Automatically generated by ReactJS.NET. Do not edit, your changes will be overridden.
// Version: 5.2.12 (build 29c76c8) with Babel 7.8.7
// Generated at: 23.12.2021 21:39:59
///////////////////////////////////////////////////////////////////////////////
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { datetimeshortformat, formatmoney } from '../rjs/components/globals.jsx';
import { OrderBasket } from './components/myorders/orderbasket.jsx';
import { OrderDateTab } from './components/myorders/orders.jsx';
import { SelectDishKind, SelectMeal } from '../rjs/components/selects.jsx';
import { days } from './components/dateheaders.jsx';

class DateHeaders extends React.Component {
    constructor(props) {
        super(props);

        _defineProperty(this, "dateToshortString", dt => {
            var dd = dt.getDate();
            var mm = dt.getMonth() + 1;

            if (dd < 10) {
                dd = '0' + dd;
            }

            if (mm < 10) {
                mm = '0' + mm;
            }

            var yyyy = dt.getFullYear();
            return dd + '.' + mm; // + '.' + yyyy;
        });

        _defineProperty(this, "rendernavlink", link => {
            const {
                ordermodel,
                ontabclick
            } = this.props;
            const addclass = link.index === ordermodel.activeday ? "active" : "";
            return React.createElement("li", {
                key: link.date,
                className: "nav-item",
                onClick: e => ontabclick(link.index)
            }, React.createElement("a", {
                className: "nav-link day-of-week p-lg-0 p-md-0 nav-item nav-day " + addclass,
                style: {
                    width: '100%'
                },
                id: 'nav-tab-' + link.index,
                "data-toggle": "tab",
                href: "#nav-content-" + link.index,
                role: "tab",
                "aria-controls": "nav-content-{link.index}",
                "data-i": link.index,
                "aria-selected": "false"
            }, React.createElement("div", {
                className: "col-12 p-0 d-flex flex-lg-column flex-md-column flex-column-reverse date-container"
            }, React.createElement("div", {
                className: "col-12 d-lg-none d-md-none d-flex p-0 justify-content-center align-items-center arrow-down-mob",
                style: {
                    minWidth: '55px'
                }
            }, React.createElement("img", {
                src: "../img/mob-arrow-active.svg",
                alt: ""
            })), React.createElement("div", {
                className: "col-12 d-flex justify-content-center day-of",
                "data-i": link.index
            }, link.dayname), React.createElement("div", {
                className: "col-12 number-of d-md-block d-lg-block d-none shorttabdate",
                style: {
                    fontSize: '14px',
                    fontFamily: 'Open-Sans, sans-serif'
                }
            }, this.dateToshortString(link.date)), React.createElement("div", {
                className: "col-12 month-rus month-rus__active d-lg-none d-md-none d-flex p-0 justify-content-center align-items-center date-day",
                style: {
                    fontSize: '14px',
                    fontFamily: 'Open-Sans, sans-serif',
                    minWidth: '55px',
                    lineHeight: '29px'
                }
            }, this.dateToshortString(link.date)))));
        });

        this.rendernavlink = this.rendernavlink.bind(this);
        this.dateToshortString = this.dateToshortString.bind(this);
        this.startdate = new Date();
        this.startdate.setDate(this.startdate.getDate() - this.startdate.getDay() + 1);
    }

    render() {
        const {
            ordermodel
        } = this.props;
        return React.createElement("div", {
            className: "carousel-item active"
        }, React.createElement("input", {
            type: "hidden",
            id: "currentdate",
            "data-val": "true",
            "data-val-required": "The Int64 field is required.",
            name: "ms_since1970",
            defaultValue: 1636902164738
        }), React.createElement("ul", {
            className: "nav nav-tabs justify-content-lg-around justify-content-md-around justify-content-between weeks-tab px-3",
            id: "weeks-tab",
            role: "tablist"
        }, Array.from(Array(7).keys()).map((el, idx) => {
            var date = new Date(this.props.ordermodel.startdate.valueOf());
            date.setDate(date.getDate() + idx);
            return this.rendernavlink({
                index: idx,
                dayname: days[date.getDay()],
                date: date,
                activeday: ordermodel.activeday
            });
        })));
    }

}

;

class DateTabs extends React.Component {
    constructor(props) {
        super(props);
    }

    render() {
        const {
            ordermodel
        } = this.props;
        return React.createElement("div", {
            className: "tab-content mt-lg-2 pt-lg-3 mt-md-2 pt-md-3 mt-1 pt-0",
            style: {
                width: '100%'
            },
            id: "week-day-content"
        }, Array.from(Array(7).keys()).map((el, idx) => {
            var date = new Date(this.props.ordermodel.startdate.valueOf());
            date.setDate(date.getDate() + idx);
            return React.createElement(OrderDateTab, {
                key: date,
                tools: this.props.tools,
                ordertab: {
                    index: idx,
                    date: date,
                    dishKindId: ordermodel.dishKindId,
                    mealId: ordermodel.mealId,
                    isactive: ordermodel.activeday === idx
                }
            });
        }));
    }

}

;
export class MyOrders extends React.Component {
    constructor(props) {
        super(props);

        _defineProperty(this, "onDishKindSelected", dishKindId => {
            this.setState(_objectSpread({}, this.state, {
                ordermodel: _objectSpread({}, this.state.ordermodel, {
                    dishKindId: dishKindId
                })
            }));
        });

        _defineProperty(this, "onMealSelected", mealId => {
            this.setState(_objectSpread({}, this.state, {
                ordermodel: _objectSpread({}, this.state.ordermodel, {
                    mealId: mealId
                })
            }));
        });

        this.onDishKindSelected = this.onDishKindSelected.bind(this);
        this.onMealSelected = this.onMealSelected.bind(this);
        this.incrementdays = this.incrementdays.bind(this);
        this.onLoaded = this.onLoaded.bind(this);
        this.ondialogclose = this.ondialogclose.bind(this);
        this.ondialogyes = this.ondialogyes.bind(this);
        this.ondialogno = this.ondialogno.bind(this);
        this.ontabclick = this.ontabclick.bind(this);
        this.setmealid = this.setmealid.bind(this);
        this.setavailablemealids = this.setavailablemealids.bind(this);
        this.showweekdetails = this.showweekdetails.bind(this);
        this.registerDomEvents = this.registerDomEvents.bind(this);
        this.unregisterDomEvents = this.unregisterDomEvents.bind(this);
        this.handleDomEvents = this.handleDomEvents.bind(this);
        this.showresult = this.showresult.bind(this);
        this.sendweekinvoice = this.sendweekinvoice.bind(this);
        this.startdate = new Date();
        const activeday = this.startdate.getDay();
        this.startdate.setDate(this.startdate.getDate() - this.startdate.getDay() + 1); //this.ordermodel = { startdate: this.startdate, activeday: 0, dishKindId: 0, mealId: 0 }

        this.state = {
            ordermodel: {
                startdate: this.startdate,
                activeday: activeday,
                dishKindId: 0,
                mealId: 0
            }
        };
        this.tools = {
            test: 'test',
            showdialog: this.showdialog.bind(this),
            setmealid: this.setmealid,
            setavailablemealids: this.setavailablemealids
        };
        this.dialog = {};
    }

    setmealid(mealId) {
        console.log('setmealid', mealId);
        this.setState({
            ordermodel: _objectSpread({}, this.state.ordermodel, {
                mealId: mealId
            })
        });
    }

    setavailablemealids(availmealsid) {
        this.setState({
            ordermodel: _objectSpread({}, this.state.ordermodel, {
                availmealsid: availmealsid
            })
        });
    }

    ontabclick(idx) {
        if (idx !== this.state.activeday) {
            this.setState({
                ordermodel: _objectSpread({}, this.state.ordermodel, {
                    activeday: idx
                })
            });
        }
    }

    ondialogclose() {
        this.setdialog({
            isopen: false
        });
        this.unregisterDomEvents();
    }

    ondialogyes() {
        if (this.dialog && this.dialog.yes_cb) {
            this.dialog.yes_cb();
        }
    }

    ondialogno() {
        if (this.dialog && this.dialog.no_cb) {
            this.dialog.no_cb();
        }
    }

    setdialog(dlg) {
        this.dialog = _objectSpread({}, this.dialog, {}, dlg);
        this.forceUpdate();
    }

    registerDomEvents() {
        document.addEventListener("click", this.handleDomEvents);
    }

    unregisterDomEvents() {
        document.removeEventListener("click", this.handleDomEvents);
    }

    sendweekinvoice() {
        fetch(`/UserDayDishes/SendWeekInvoice/?day=${encodeURI(this.startdate.toDateString())}`, {
            method: 'GET'
        }).then(response => response.json()).then(data => {
            this.ondialogclose(); //this.showdialog({ title: 'Р—РІС–С‚', html: text, wide: true })

            this.showresult(_objectSpread({}, data, {
                details: 'Р—РІС–С‚ РЅР°РґС–СЃР»Р°РЅРѕ'
            }));
        }).catch(e => {
            this.ondialogclose();
            console.log("error", e);
        });
    }

    handleDomEvents(e) {
        if (e && e.target) {
            if (e.target.classList && e.target.classList.contains('sendWeek')) {
                this.sendweekinvoice();
                return;
            }

            console.log(e);

            if (e.target.parentElement && e.target.parentElement.classList && e.target.parentElement.classList.contains('sendWeek')) {
                this.sendweekinvoice();
                return;
            }
        }
    }

    showdialog(options) {
        this.registerDomEvents();
        this.setdialog({
            isopen: true,
            title: options.title,
            message: options.message,
            type: options.type,
            render: options.render,
            html: options.html,
            yes_cb: options.yes_cb,
            no_cb: options.no_cb,
            wide: options.wide
        });
    }

    incrementdays(days) {
        //  const newdactiveday = this.state.ordermodel.activeday + days
        var newstartdate = new Date(this.state.ordermodel.startdate.valueOf());
        newstartdate.setDate(newstartdate.getDate() + days);
        this.startdate = new Date(newstartdate.valueOf());
        this.setState(_objectSpread({}, this.state, {
            ordermodel: _objectSpread({}, this.state.ordermodel, {
                activeday: 0,
                startdate: newstartdate
            })
        }));
    }

    onLoaded(filters) {
        this.setState(_objectSpread({}, this.state, {
            ordermodel: _objectSpread({}, this.state.ordermodel, {}, filters)
        }));
    }

    showresult(data) {
        const issucess = data && data.res === 'OK';

        if (issucess) {
            this.showdialog({
                title: 'Р’РёРєРѕРЅР°РЅРѕ',
                message: data.details
            });
        } else {
            this.showdialog({
                title: 'РџРѕРјРёР»РєР°',
                message: data.details ? data.details : 'РЎС‚Р°Р»Р°СЃСЏ РїРѕРјРёР»РєР° СЃРїСЂРѕР±СѓР№С‚Рµ РїС–Р·РЅС–С€Рµ'
            });
        }
    }

    showweekdetails() {
        fetch(`/UserDayDishes/GetWeekOrderDetails/?day=${encodeURI(this.startdate.toDateString())}`, {
            method: 'GET'
        }).then(response => response.text()).then(text => this.showdialog({
            title: 'Р—РІС–С‚',
            html: text,
            wide: true
        })).catch(e => {
            console.log(e);
            this.showresult({
                res: 'FAIL'
            });
        });
    }

    render() {
        const {
            ordermodel
        } = this.state;
        const newstyledishkind = true;

        const renderDialog = dlg => {
            if (dlg && dlg.isopen) {
                return React.createElement(ModalDialog, {
                    isopen: dlg.isopen,
                    title: dlg.title,
                    message: dlg.message,
                    type: dlg.type,
                    render: dlg.render,
                    onclose: this.ondialogclose,
                    onyes: this.ondialogyes,
                    onno: this.ondialogno,
                    html: dlg.html,
                    wide: dlg.wide
                });
            }
        };

        return React.createElement(React.Fragment, null, React.createElement("div", {
            className: "container-xl container container-md container-sm container-lg"
        }, React.createElement("div", {
            className: "col-12 align-content-center mr-md-auto px-0 d-flex justify-content-between flex-md-row flex-lg-row flex-column-reverse mt-3"
        }, React.createElement("div", {
            className: "col-lg-9 col-md-9 col-12 d-flex flex-column p-0 mt-2"
        }, !newstyledishkind && React.createElement("span", {
            className: "change-color-grey change-weight",
            style: {
                fontSize: '16px'
            }
        }, "\u041E\u0431\u0440\u0430\u0442\u0438 \u043C\u0435\u043D\u044E:"), React.createElement("div", {
            className: "select-dishesKind d-flex flex-column",
            style: {
                height: '40px'
            }
        }, React.createElement(SelectDishKind, {
            value: ordermodel.dishKindId,
            usenewstyle: newstyledishkind,
            onLoaded: this.onLoaded,
            onDishKindSelected: this.onDishKindSelected,
            ordermodel: _objectSpread({}, ordermodel)
        })), React.createElement("span", {
            className: "change-color-grey change-weight",
            style: {
                fontSize: '16px'
            }
        }, "\u041F\u0440\u0438\u0439\u043E\u043C\u0438 \u0457\u0436\u0456:"), React.createElement("div", {
            className: "select-meal"
        }, React.createElement(SelectMeal, {
            value: ordermodel.mealId,
            onLoaded: this.onLoaded,
            onMealSelected: this.onMealSelected,
            ordermodel: ordermodel
        }))), React.createElement("button", {
            onClick: this.showweekdetails,
            type: "button",
            className: "getDetails col-lg-3 col-md-3 pr-3 col-12 btn btn-xl btn-outline-danger align-self-end font-weight-bold d-flex justify-content-between",
            style: {
                background: 'rgb(255, 255, 255)',
                borderColor: 'rgb(54, 194, 51)',
                outline: 'none',
                height: '48px',
                color: 'rgb(54, 194, 51)',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'space-evenly',
                fontSize: '14px',
                textTransform: 'uppercase'
            }
        }, React.createElement("img", {
            src: "../img/week-report.svg",
            alt: ""
        }), React.createElement("span", {
            className: "d-flex align-content-center",
            style: {
                marginRight: '23%'
            }
        }, "\u0422\u0438\u0436\u043D\u0435\u0432\u0438\u0439 \u0437\u0432\u0456\u0442"))), React.createElement("div", {
            id: "days-of-week-carousel",
            className: "carousel slide container px-0 order-carousel mt-3",
            "data-ride": "carousel"
        }, React.createElement("div", {
            className: "carousel-inner",
            style: {
                position: 'relative'
            }
        }, React.createElement(DateHeaders, {
            ordermodel: ordermodel,
            tools: this.tools,
            ontabclick: this.ontabclick
        })), React.createElement("a", {
            onClick: e => this.incrementdays(-7),
            className: "carousel-control-prev d-lg-flex d-md-flex align-items-start mt-3 dayselectback",
            style: {
                width: 'auto',
                zIndex: 6
            },
            href: "#days-of-week-carousel",
            role: "button",
            "data-slide": "prev"
        }, React.createElement("span", {
            className: "carousel-control-prev-icon d-flex justify-content-start align-items-center",
            "aria-hidden": "true",
            style: {
                width: '30px',
                height: '30px',
                border: '2px solid #F05E25',
                borderRadius: '50%'
            }
        }, React.createElement("div", {
            style: {
                border: '4px solid transparent',
                borderRight: '5px solid #F05E25',
                display: 'block',
                width: 0,
                height: 0
            }
        })), React.createElement("span", {
            className: "sr-only"
        }, "Previous")), React.createElement("a", {
            onClick: e => this.incrementdays(7),
            className: "carousel-control-next d-flex align-items-start mt-3 dayselectforward",
            style: {
                width: 'auto',
                zIndex: 6,
                maxHeight: '30px'
            },
            href: "#days-of-week-carousel",
            role: "button",
            "data-slide": "next"
        }, React.createElement("span", {
            className: "carousel-control-next-icon d-flex justify-content-end align-items-center",
            "aria-hidden": "true",
            style: {
                width: '30px',
                height: '30px',
                border: '2px solid #F05E25',
                borderRadius: '50%'
            }
        }, React.createElement("div", {
            style: {
                border: '4px solid transparent',
                borderLeft: '5px solid #F05E25',
                display: 'block',
                width: 0,
                height: 0
            }
        }), " "), React.createElement("span", {
            className: "sr-only"
        }, "Next")), React.createElement("div", {
            className: "col-12 p-0",
            style: {
                marginTop: '-105px',
                zIndex: 10
            }
        }), React.createElement(DateTabs, {
            ordermodel: ordermodel,
            tools: this.tools
        }))), renderDialog(this.dialog));
    }

}
ReactDOM.render(React.createElement(MyOrders, null), document.getElementById("content"));