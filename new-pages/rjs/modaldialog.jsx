// @hash v3-73DD84E63335A76F90F8B2541E213ED4C16A06CC
// Automatically generated by ReactJS.NET. Do not edit, your changes will be overridden.
// Version: 5.2.12 (build 29c76c8) with Babel 7.8.7
// Generated at: 23.12.2021 21:39:58
///////////////////////////////////////////////////////////////////////////////
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ModalDialog extends React.Component {
    constructor(props) {
        super(props);
    }

    render() {
        const {
            isopen,
            title,
            message,
            onclose,
            onyes,
            onno,
            type,
            html,
            wide,
            render
        } = this.props;
        var modalstyle = {};
        var modalcontentstyle = {};
        var modalbodystyle = {};
        var modalheaderstyle = {};
        var modalfooterstyle = {};
        var modalshowstyle = {
            background: 'rgba(200, 200, 200, 0.5)'
        };

        if (isopen) {
            modalshowstyle = _objectSpread({}, modalshowstyle, {
                display: "block"
            });
        }

        if (wide) {
            modalfooterstyle = _objectSpread({}, modalfooterstyle, {
                height: '82px'
            });
            modalheaderstyle = _objectSpread({}, modalheaderstyle, {
                height: '44px'
            });
            modalcontentstyle = _objectSpread({}, modalcontentstyle, {
                height: `${window.innerHeight - 50}px`
            });
            modalbodystyle = _objectSpread({}, modalbodystyle, {
                height: `${window.innerHeight - 50 - 44 - 82}px`
            });
            modalstyle = _objectSpread({}, modalstyle, {
                width: '100%',
                minWidth: '100%'
            });
        }

        var titlestyle = {
            color: '#212529'
        };
        if (type === 'error') titlestyle = _objectSpread({}, titlestyle, {
            color: 'rgb(255,0,0)'
        });

        const _onclose = () => {
            if (type == 'yesno') {
                if (onno) onno();
            }

            onclose();
        };

        const _onyes = () => {
            if (onyes) onyes();
            onclose();
        };

        const _onno = () => {
            if (onno) onno();
            onclose();
        };

        const renderbuttons = () => {
            if (type == 'yesno') {
                return React.createElement(React.Fragment, null, React.createElement("button", {
                    id: "btnyes",
                    type: "button",
                    className: "btn btn-primary",
                    onClick: _onyes
                }, "Tak"), React.createElement("button", {
                    id: "btno",
                    type: "button",
                    className: "btn btn-primary",
                    onClick: _onno
                }, "\u041D\u0456"));
            } else {
                return React.createElement("button", {
                    id: "btnyes",
                    type: "button",
                    className: "btn btn-primary",
                    onClick: _onclose
                }, "Tak");
            }
        };

        return React.createElement("div", {
            className: "modal " + (isopen ? "show" : "fade"),
            id: "ModalPopUp",
            role: "dialog",
            "aria-modal": "true",
            style: modalshowstyle
        }, React.createElement("div", {
            className: "modal-dialog ",
            style: modalstyle
        }, React.createElement("div", {
            className: "modal-content",
            style: modalcontentstyle
        }, React.createElement("div", {
            className: "modal-header",
            style: modalheaderstyle
        }, React.createElement("h5", {
            className: "modal-title",
            style: titlestyle
        }, title), React.createElement("button", {
            type: "button",
            className: "close",
            "data-dismiss": "modal",
            "aria-label": "Close",
            onClick: _onclose
        }, React.createElement("span", {
            "aria-hidden": "true"
        }, "X"))), React.createElement("div", {
            className: "modal-body",
            style: modalbodystyle
        }, !(message instanceof Function) && message, message instanceof Function && message(), render instanceof Function && render(), html && React.createElement("div", {
            dangerouslySetInnerHTML: {
                __html: html
            },
            style: {
                overflowY: 'auto',
                height: '100%',
                margin: '0',
                padding: '0'
            }
        })), React.createElement("div", {
            className: "modal-footer",
            style: modalfooterstyle
        }, renderbuttons()))));
    }

}